buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
    }
}

android {

  splits {

    // Configures multiple APKs based on ABI.
    abi {

      // Enables building multiple APKs per ABI.
      enable false

      // By default all ABIs are included, so use reset() and include
      // to specify that we only want APKs for x86, armeabi-v7a, and mips.

      // Resets the list of ABIs that Gradle should create APKs for to none.
      // reset()

      // Specifies a list of ABIs that Gradle should create APKs for.
      // include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'

      // Specifies that we do not want to also generate a universal APK that includes all ABIs.
      // universalApk true
    }
  }
}

// Version code scheme:
// 0  - reserved bit
// 00 - api level
// 0  - screen density code
// 0  - abi code
// 0  - major version number
// 00 - minor version number
// 0  - patch version number
// 0  - candidate version number

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['universal': 0, 'armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 6, 'x86_64': 7]

// For per-density APKs, create a similar map like this:
// ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3]

android.applicationVariants.all { variant ->

  def versionCode = buildVersionCode(variant.versionName)

  // assign different version code for each output
  variant.outputs.each { output ->

    def abi = output.getFilter(com.android.build.OutputFile.FilterType.ABI) ?: 'universal'
    def baseAbiVersionCode = project.ext.abiCodes.get(abi) ?: 0

    output.versionCodeOverride = baseAbiVersionCode * 100000 + versionCode
    output.versionNameOverride = variant.versionName + ' (' + abi + ')'
  }
}

/**
 * Builds an Android version code from the version of the project.
 * This is designed to handle the -SNAPSHOT and -RC format.
 *
 * I.e. during development the version ends with -SNAPSHOT. As the code stabilizes and release nears
 * one or many Release Candidates are tagged. These all end with "-RC1", "-RC2" etc.
 * And the final release is without any suffix.
 * @return
 */
def buildVersionCode(version) {
    // The rules is as follows:
    // -snapshot counts as 0
    // -rc* counts as the Release Candidate number, i.e. 1 to 8
    // Final release counts as 9.
    // Thus you can only have 8 Release Candidates

    // Patch version number: 0 to 9
    // Minor version number: 0 to 99
    // Major version number: 0 to 9

    def candidate = "9"
    def (major, minor, patch) = version.toLowerCase().replaceAll('-', '').tokenize('.')
    if (patch.endsWith("snapshot")) {
        candidate = "0"
        patch = patch.replaceAll("[^0-9]","")
    } else {
        def rc
        (patch, rc) = patch.tokenize("rc")
        if (rc) {
            candidate = rc
        }
    }

    (major, minor, patch, candidate) = [major, minor, patch, candidate].collect{it.toInteger()}

    (major * 10000) + (minor * 100) + (patch * 10) + candidate;
}
